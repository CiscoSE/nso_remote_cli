#!/usr/bin/env python3
"""
Main file for CLI utility

Copyright (c) 2021 Cisco and/or its affiliates.

This software is licensed to you under the terms of the Cisco Sample
Code License, Version 1.1 (the "License"). You may obtain a copy of the
License at

               https://developer.cisco.com/docs/licenses

All use of the material herein must be in accordance with the terms of
the License. All rights not expressly granted by the License are
reserved. Unless required by applicable law or agreed to separately in
writing, software distributed under the License is distributed on an "AS
IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
or implied.
"""
import os
from os.path import exists
import click
import requests
import yaml


@click.group()
def main():
    """
    Top level command
    """
    pass


@click.command()
@click.option('--inventory-file', "-i", show_default=True, default="./nso_device_inventory.yaml",
              help='NSO Inventory file in yaml format. Use --print-inventory-example to generate one')
@click.option('--print-inventory-example', "-e", help='Print example inventory file', type=bool, is_flag=True)
def add_devices(inventory_file, print_inventory_example):
    """
    Add devices into NSO
    """
    if print_inventory_example:
        example = """
---
## Example inventory YAML file. 
# It is a yaml representation of the json payload NSO expects. 
# More parameteres can be addded, as long as it is defined in the yang models.
# If you are not sure how to add your devices with extra settings, you can add one device manually in NSO, 
# execute "show running-config devices device <name> | de-select config | display json" and convert the output to yaml
devices:
  device:
  - name: core-01
    address: 10.0.0.1
    authgroup: nso_svc_account
    device-type:
      cli:
        ned-id: cisco-ios-cli-6.77:cisco-ios-cli-6.77
        protocol: ssh
    state:
      admin-state: unlocked
  - name: access-01
    address: 10.0.0.2
    authgroup: nso_svc_account
    device-type:
      cli:
        ned-id: cisco-ios-cli-6.77:cisco-ios-cli-6.77
        protocol: ssh
    state:
      admin-state: unlocked
        """
        click.echo(example)
        return
    else:
        # Check for inventory file
        if not exists(inventory_file):
            raise click.BadParameter("Inventory file does not exists")
        # Check for env variables
        if "NSO_RESTCONF_URL" not in os.environ:
            click.echo("NSO_RESTCONF_URL environment variable not found - using http://localhost:8080/restconf")
        if "NSO_USER" not in os.environ:
            click.echo("NSO_USER environment variable not found - using admin")
        if "NSO_PASSWORD" not in os.environ:
            click.echo("NSO_PASSWORD environment variable not found - using admin")
        # Add devices
        with open(inventory_file, 'r') as inventory_yaml:
            payload = yaml.safe_load(inventory_yaml)
            _make_nso_request(payload)


def _make_nso_request(payload):
    """
    Create a NSO PATCH request with a given payload
    :param payload: dictionary or list to be sent
    :return: None
    """
    url = f"{os.getenv('NSO_RESTCONF_URL', 'http://localhost:8080/restconf')}/data/"
    username = os.getenv('NSO_USER', 'admin')
    password = os.getenv('NSO_PASSWORD', 'admin')
    headers = {
        'Accept': 'application/yang-data+json',
        'Content-Type': 'application/yang-data+json'
    }
    response = requests.request("PATCH", url, headers=headers, json=payload, auth=(username, password))
    if not response.ok:
        click.echo("Error while sending request to NSO", err=True)
        click.echo(f"Status code: {response.status_code}", err=True)
        click.echo(f"Response {response.text}", err=True)
        click.Abort()
    click.echo("Devices added successfully")


main.add_command(add_devices)

if __name__ == '__main__':
    """
    Application entry point
    """
    main()
